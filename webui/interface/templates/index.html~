{% extends "base.html" %}

{% block nav_control %}class="active"{% endblock %}

{% block title %}Control | {% endblock %}

{% block content %}
      <div class="row">
        <div class="col-xs-8">
          <div class="panel panel-primary">
            <div class="panel-heading">
              <h3 class="panel-title">Robot Camera</h3>
            </div>
            <div class="panel-body">
              <img class="img-responsive center-block" src="http://{{ baseurl }}:8080/stream?topic=/camera/rgb/image_raw"/>
            </div>
          </div>
          <div class="panel panel-info">
            <div class="panel-heading">
              <h3 class="panel-title">Info</h3>
            </div>
            <div class="panel-body">
              <table class="col-xs-12">
                <tr>
                  <td>Battery Voltage: <span id="battery_voltage">-</span> V</td>
                  <td>Laptop battery: <span id="laptop_battery">-</td>
                  <td>Wifi strength: <span id="wifi">-</span></td>
                  
                </tr>
                <tr>
                  <td>Sonar1: <span id="sonar1">-</span> cm</td>
                  <td>Sonar2: <span id="sonar2">-</span> cm</td>
                  <td>Heading: <span id="heading">-</span>&deg;</td>
                </tr>
                <tr>
                  <td>Infrared1: <span id="infrared1">-</span> cm</td>
                  <td>Infrared2: <span id="infrared2">-</span> cm</td>
                  <td>Infrared3: <span id="infrared3">-</span> cm</td>
                </tr>
              </table>
            </div>
          </div>
        </div>
        <div class="col-xs-4">
          <div class="panel panel-success">
            <div class="panel-heading">
              <h3 class="panel-title">Joystick</h3>
            </div>
            <div class="panel-body" id="joystick-panel">
              <div id="joystick-container"></div>
              <span id="result"></span>
            </div>
          </div>
          <div class="panel panel-info">
            <div class="panel-heading">
              <h3 class="panel-title">My Camera</h3>
            </div>
            <div class="panel-body">
              <!---<input class="btn" type="button" id="call_but" value="Call" disabled><br>-->
              <video id="self_view" class="img-responsive center-block" autoplay muted></video>
              <video id="remote_view" style="visibility: hidden;" autoplay></video>
            </div>
          </div>
        </div>
      </div>
{% endblock %}

{% block additional_javascripts %}
        <script src="/static/virtualjoystick/virtualjoystick.js"></script>
        <script src="/static/roslibjs/eventemitter2.min.js"></script>
        <script src="/static/roslibjs/roslib.min.js"></script>
		    <script>
	        var ros = new ROSLIB.Ros();
	        ros.connect('ws://{{ baseurl }}:9090');
	        
	        var laptop_state_listener = new ROSLIB.Topic({
            ros : ros,
            name : '/laptop_state',
            messageType : 'codeass_driver/LaptopState'
          });

          laptop_state_listener.subscribe(function(message) {
            $("#laptop_battery").text(message.battery);
            $("#wifi").text(message.wifi_signal);
          });
	        
	        var robot_state_listener = new ROSLIB.Topic({
            ros : ros,
            name : '/eddiebot_node/sensor_state',
            messageType : 'eddiebot_node/EddiebotSensorState'
          });

          robot_state_listener.subscribe(function(message) {
            $("#battery_voltage").text((message.voltage/1000).toFixed(2));
            $("#infrared1").text(message.cliff_front_left_signal);//infrared1);
            $("#infrared2").text(message.cliff_front_right_signal);//infrared2);
            $("#infrared3").text(message.cliff_right_signal);//infrared3);
            $("#sonar1").text(message.wall_signal);//sonar1);
            $("#sonar2").text(message.cliff_left_signal);//sonar2);
            $("#heading").text(message.angle);                                 
          });
	        
	        var cmdVel = new ROSLIB.Topic({
            ros : ros,
            name : '/cmd_vel',
            messageType : 'geometry_msgs/Twist'
          });
          
          var deadzone = 10;
          
          var stop_sent = false;
          
          function send_command(dx, dy) {
            if (dx < deadzone && dx > -deadzone) 
              dx = 0;
              
            if (dy < deadzone && dy > -deadzone) 
              dy = 0;
            
            if (dx == 0 && dy == 0) {
              if (stop_sent) 
                return;
              else
                stop_sent = true;
            } else {
                stop_sent = false;
            }
            
            var twist = new ROSLIB.Message({
                linear : {
                  x : dy/100.0,
                  y : 0,
                  z : 0
                },
                angular : {
                  x : 0,
                  y : 0,
                  z : dx/100.0
                }
            });

            cmdVel.publish(twist);
          }
	        
	        var joystick	= null;
			
	        function onWindowResize() {
            var jpw =  $('#joystick-panel').width();
            console.log("width", jpw, $('#joystick-container').offset().top+jpw/2);
  	        $('#joystick-container').css({'height':jpw+'px','width':jpw+'px'});
      	        
  	        if(joystick) 
	            joystick.destroy();
  	        joystick = new VirtualJoystick({
			        container	: document.getElementById('joystick-container'),
			        top : $('#joystick-container').offset().top,
			        left : $('#joystick-container').offset().left,
			        mouseSupport	: true,
			        stationaryBase	: true,
              baseX		: $('#joystick-container').offset().left + jpw/2,
              baseY		: $('#joystick-container').offset().top + jpw/2,
              strokeStyle	: 'black',
              limitStickTravel: true,
              stickRadius	: jpw
		        });
          }
	            
			    onWindowResize();
          window.addEventListener('resize', onWindowResize, false); 

			    setInterval(function(){
				    var outputEl	= document.getElementById('result');
				
				    var dx = joystick.deltaXpercent();
				    var dy = joystick.deltaYpercent();
				
				    send_command(-dx, -dy);
				
				    outputEl.innerHTML	= ' dx:'+dx+'%'
					    + ' dy:'+dy+'%'
					    + (joystick.right()	? ' right'	: '')
					    + (joystick.up()	? ' up'		: '')
					    + (joystick.left()	? ' left'	: '')
					    + (joystick.down()	? ' down' 	: '')	
			    }, 1/30 * 1000);
		    </script>
		    <script src="/static/webrtc/signaling_channel.js"></script>
        <script src="/static/webrtc/main.js"></script>
{% endblock %}
